Nombre: Mosainer Martín
Trabajo Práctico 6: AyDA

Ejercicio: Explicación



Debemos calcular el costo total de cada posible asignación y elegir la asignación con el costo mínimo.

La matriz de costo C para el problema es:

 C = [9 2 7 8]
     [6 4 3 7]
     [5 8 1 8]
     [7 6 9 4]
​
Explicación paso a paso: 

Paso 1: Definir todas las combinaciones posibles
Para este problema, cada persona debe realizar un trabajo único. Con 4 personas y 4 trabajos, tenemos 
4!=24 combinaciones posibles, representadas por las permutaciones de los índices 
(1,2,3,4) para los trabajos.
Recalcar que cada permutación representa una asignación diferente de trabajos a personas.

Paso 2: Calcular el costo para cada permutación
Para cada permutación de trabajos, sumamos los costos de asignar el trabajo correspondiente a cada persona.

Por ejemplo, si la asignación es 

(1,2,3,4):

Persona 1 hace el Trabajo 1: costo = 9
Persona 2 hace el Trabajo 2: costo = 4
Persona 3 hace el Trabajo 3: costo = 1
Persona 4 hace el Trabajo 4: costo = 4
Entonces, el costo total de la asignación 

(1,2,3,4) es:

9+4+1+4=18

Luego:
Paso 3: Completar el cálculo de costos para todas las asignaciones posibles
A continuación, calculamos el costo total para cada una de las 24 permutaciones y buscamos el costo mínimo.

Voy a listar todas las permutaciones y calcular los costos. Permíteme proceder con estos cálculos para determinar la asignación óptima.

Aquí están los resultados de la búsqueda exhaustiva de todas las asignaciones posibles y sus respectivos costos:

Asignación 
(1,0,2,3) - Costo: 13

Asignación 
(1,2,0,3) - Costo: 14

Asignación 
(1,3,2,0) - Costo: 17

Asignación 
(0,1,2,3) - Costo: 18

Asignación 
(1,2,3,0) - Costo: 20

Asignación 
(2,1,0,3) - Costo: 20

Asignación 
(3,1,2,0) - Costo: 20

Asignación 
(3,0,2,1) - Costo: 21

Asignación 
(3,2,0,1) - Costo: 22

Asignación 
(0,3,2,1) - Costo: 23

Asignación 
(1,3,0,2) - Costo: 23

Asignación 
(0,2,1,3) - Costo: 24

Asignación 
(1,0,3,2) - Costo: 25

Asignación 
(2,0,1,3) - Costo: 25

Asignación 
(2,3,0,1) - Costo: 25

Asignación 
(0,2,3,1) - Costo: 26

Asignación 
(2,1,3,0) - Costo: 26

Asignación 
(3,1,0,2) - Costo: 26

Asignación 
(3,2,1,0) - Costo: 26

Asignación 
(2,0,3,1) - Costo: 27

Asignación 
(2,3,1,0) - Costo: 29

Asignación 
(0,1,3,2) - Costo: 30

Asignación 
(3,0,1,2) - Costo: 31

Asignación 
(0,3,1,2) - Costo: 33

Solución Óptima
La asignación con el costo mínimo es 
(1,0,2,3) con un costo de 13.

Esto significa:

Persona 1 realiza el Trabajo 2.
Persona 2 realiza el Trabajo 1.
Persona 3 realiza el Trabajo 3.
Persona 4 realiza el Trabajo 4.
Esta es la asignación óptima para minimizar el costo total. 


Código hecho en javascript

from itertools import permutations

# Matriz de costos
C = [
    [9, 2, 7, 8],
    [6, 4, 3, 7],
    [5, 8, 1, 8],
    [7, 6, 9, 4]
]

# Lista para almacenar los resultados de cada permutación
resultados = []

# Generamos todas las permutaciones posibles de las asignaciones de trabajos
for asignacion in permutations(range(4)):
    # Calculamos el costo total para la asignación actual
    costo_total = sum(C[i][asignacion[i]] for i in range(4))
    resultados.append((asignacion, costo_total))

# Ordenamos los resultados por el costo total para encontrar el mínimo
resultados.sort(key=lambda x: x[1])
resultados

[((1, 0, 2, 3), 13),
 ((1, 2, 0, 3), 14),
 ((1, 3, 2, 0), 17),
 ((0, 1, 2, 3), 18),
 ((1, 2, 3, 0), 20),
 ((2, 1, 0, 3), 20),
 ((3, 1, 2, 0), 20),
 ((3, 0, 2, 1), 21),
 ((3, 2, 0, 1), 22),
 ((0, 3, 2, 1), 23),
 ((1, 3, 0, 2), 23),
 ((0, 2, 1, 3), 24),
 ((1, 0, 3, 2), 25),
 ((2, 0, 1, 3), 25),
 ((2, 3, 0, 1), 25),
 ((0, 2, 3, 1), 26),
 ((2, 1, 3, 0), 26),
 ((3, 1, 0, 2), 26),
 ((3, 2, 1, 0), 26),
 ((2, 0, 3, 1), 27),
 ((2, 3, 1, 0), 29),
 ((0, 1, 3, 2), 30),
 ((3, 0, 1, 2), 31),
 ((0, 3, 1, 2), 33)]
